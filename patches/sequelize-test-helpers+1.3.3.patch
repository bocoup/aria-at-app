diff --git a/node_modules/sequelize-test-helpers/README.md b/node_modules/sequelize-test-helpers/README.md
index a29d558..347d819 100644
--- a/node_modules/sequelize-test-helpers/README.md
+++ b/node_modules/sequelize-test-helpers/README.md
@@ -18,6 +18,9 @@ This library assumes:
 2. You are using [`sinon`](http://sinonjs.org) â€” Version 5 or better.
 3. Using [`mocha`](https://mochajs.org) is also recommended, but as long as you are using `chai` and `sinon` this should work with any test runner.
 
+**NB. You can also use [`jest`](https://jestjs.io) - Version 26 or better. Ensure `SEQUELIZE_TEST_HELPERS_JEST_RUNNER=true` is set in your environment.**
+
+
 ### Installation
 
 Add `sequelize-test-helpers` as a `devDependency`:
@@ -116,11 +119,11 @@ describe('src/models/User', () => {
 
   checkModelName(User)('User')
 
-  context('properties', () => {
+  describe('properties', () => {
     ;['age', 'firstname', 'lastname', 'email', 'token'].forEach(checkPropertyExists(user))
   })
 
-  context('associations', () => {
+  describe('associations', () => {
     const Company = 'some dummy company'
 
     before(() => {
@@ -132,7 +135,7 @@ describe('src/models/User', () => {
     })
   })
 
-  context('indexes', () => {
+  describe('indexes', () => {
     ;['email', 'token'].forEach(checkUniqueIndex(user))
   })
 })
@@ -242,7 +245,7 @@ describe('src/utils/save', () => {
 
   let result
 
-  context('user does not exist', () => {
+  describe('user does not exist', () => {
     before(async () => {
       User.findOne.resolves(undefined)
       result = await save({ id, ...data })
@@ -263,7 +266,7 @@ describe('src/utils/save', () => {
     })
   })
 
-  context('user exists', () => {
+  describe('user exists', () => {
     before(async () => {
       fakeUser.update.resolves(fakeUser)
       User.findOne.resolves(fakeUser)
@@ -281,7 +284,7 @@ describe('src/utils/save', () => {
     })
 
     it('returned the user', () => {
-      expect(result).to.deep.equal(fakeUser)
+      expect(result).toEqual(fakeUser)
     })
   })
 })
@@ -301,11 +304,11 @@ const { Model, DataTypes } = require('sequelize')
 const factory = sequelize => {
   class User extends Model {}
   User.init(
-    {
-      firstName: DataTypes.STRING,
-      lastName: DataTypes.STRING
-    },
-    { sequelize, modelName: 'User' }
+          {
+            firstName: DataTypes.STRING,
+            lastName: DataTypes.STRING
+          },
+          { sequelize, modelName: 'User' }
   )
   return User
 }
@@ -341,14 +344,14 @@ describe('src/models/User', () => {
 
   it('called User.init with the correct parameters', () => {
     expect(User.init).to.have.been.calledWith(
-      {
-        firstName: DataTypes.STRING,
-        lastName: DataTypes.STRING
-      },
-      {
-        sequelize,
-        modelName: 'User'
-      }
+            {
+              firstName: DataTypes.STRING,
+              lastName: DataTypes.STRING
+            },
+            {
+              sequelize,
+              modelName: 'User'
+            }
     )
   })
 })
diff --git a/node_modules/sequelize-test-helpers/src/checks/checkHookDefined.js b/node_modules/sequelize-test-helpers/src/checks/checkHookDefined.js
index 32d4792..511e3ba 100644
--- a/node_modules/sequelize-test-helpers/src/checks/checkHookDefined.js
+++ b/node_modules/sequelize-test-helpers/src/checks/checkHookDefined.js
@@ -1,8 +1,10 @@
-const { expect } = require('chai')
+const { isJestRunner, expect } = require('../utils/checkIsJestRunner')
 
 const checkHookDefined = instance => hookName => {
   it(`defined a ${hookName} hook`, () => {
-    expect(instance.hooks[hookName]).to.be.a('function')
+    isJestRunner ?
+      expect(instance.hooks[hookName]).toBeFunction() :
+      expect(instance.hooks[hookName]).to.be.a('function')
   })
 }
 
diff --git a/node_modules/sequelize-test-helpers/src/checks/checkModelName.js b/node_modules/sequelize-test-helpers/src/checks/checkModelName.js
index 1c91542..b604d53 100644
--- a/node_modules/sequelize-test-helpers/src/checks/checkModelName.js
+++ b/node_modules/sequelize-test-helpers/src/checks/checkModelName.js
@@ -1,8 +1,10 @@
-const { expect } = require('chai')
+const { isJestRunner, expect } = require('../utils/checkIsJestRunner')
 
 const checkModelName = model => modelName => {
   it(`is named '${modelName}'`, () => {
-    expect(model.modelName).to.equal(modelName)
+    isJestRunner ?
+      expect(model.modelName).toEqual(modelName) :
+      expect(model.modelName).to.equal(modelName)
   })
 }
 
diff --git a/node_modules/sequelize-test-helpers/src/checks/checkNonUniqueIndex.js b/node_modules/sequelize-test-helpers/src/checks/checkNonUniqueIndex.js
index 5f696f5..fc50574 100644
--- a/node_modules/sequelize-test-helpers/src/checks/checkNonUniqueIndex.js
+++ b/node_modules/sequelize-test-helpers/src/checks/checkNonUniqueIndex.js
@@ -1,9 +1,12 @@
-const { expect } = require('chai')
+const { isJestRunner, expect } = require('../utils/checkIsJestRunner')
 
 const checkNonUniqueIndex = instance => indexName => {
   it(`indexed a non-unique ${indexName}`, () => {
-    expect(instance.indexes.find(index => index.unique === false && index.fields[0] === indexName))
-      .not.to.be.undefined
+    isJestRunner ?
+      expect(instance.indexes.find(index => index.unique === false && index.fields[0] === indexName))
+        .not.toBeUndefined() :
+      expect(instance.indexes.find(index => index.unique === false && index.fields[0] === indexName))
+        .not.to.be.undefined
   })
 }
 
diff --git a/node_modules/sequelize-test-helpers/src/checks/checkPropertyExists.js b/node_modules/sequelize-test-helpers/src/checks/checkPropertyExists.js
index 7bb10d5..9da6028 100644
--- a/node_modules/sequelize-test-helpers/src/checks/checkPropertyExists.js
+++ b/node_modules/sequelize-test-helpers/src/checks/checkPropertyExists.js
@@ -1,8 +1,10 @@
-const { expect } = require('chai')
+const { isJestRunner, expect } = require('../utils/checkIsJestRunner')
 
 const checkPropertyExists = instance => propName => {
   it(`has property ${propName}`, () => {
-    expect(instance).to.have.property(propName)
+    isJestRunner ?
+      expect(instance).toHaveProperty(propName) :
+      expect(instance).to.have.property(propName)
   })
 }
 
diff --git a/node_modules/sequelize-test-helpers/src/checks/checkUniqueCompoundIndex.js b/node_modules/sequelize-test-helpers/src/checks/checkUniqueCompoundIndex.js
index 6483ff9..1b85583 100644
--- a/node_modules/sequelize-test-helpers/src/checks/checkUniqueCompoundIndex.js
+++ b/node_modules/sequelize-test-helpers/src/checks/checkUniqueCompoundIndex.js
@@ -1,12 +1,18 @@
-const { expect } = require('chai')
+const { isJestRunner, expect } = require('../utils/checkIsJestRunner')
 
 const checkUniqueCompoundIndex = instance => indecies => {
   it(`indexed a unique index of ${indecies.join(' and ')}`, () => {
-    expect(
-      instance.indexes.find(
-        index => index.unique === true && index.fields.join('') === indecies.join('')
-      )
-    ).not.to.be.undefined
+    isJestRunner ?
+      expect(
+        instance.indexes.find(
+          index => index.unique === true && index.fields.join('') === indecies.join('')
+        )
+      ).not.toBeUndefined() :
+      expect(
+        instance.indexes.find(
+          index => index.unique === true && index.fields.join('') === indecies.join('')
+        )
+      ).not.to.be.undefined
   })
 }
 
diff --git a/node_modules/sequelize-test-helpers/src/checks/checkUniqueIndex.js b/node_modules/sequelize-test-helpers/src/checks/checkUniqueIndex.js
index ce8541d..5e74541 100644
--- a/node_modules/sequelize-test-helpers/src/checks/checkUniqueIndex.js
+++ b/node_modules/sequelize-test-helpers/src/checks/checkUniqueIndex.js
@@ -1,9 +1,12 @@
-const { expect } = require('chai')
+const { isJestRunner, expect } = require('../utils/checkIsJestRunner')
 
 const checkUniqueIndex = instance => indexName => {
   it(`indexed a unique ${indexName}`, () => {
-    expect(instance.indexes.find(index => index.unique === true && index.fields[0] === indexName))
-      .not.to.be.undefined
+    isJestRunner ?
+      expect(instance.indexes.find(index => index.unique === true && index.fields[0] === indexName))
+        .not.toBeUndefined() :
+      expect(instance.indexes.find(index => index.unique === true && index.fields[0] === indexName))
+        .not.to.be.undefined
   })
 }
 
diff --git a/node_modules/sequelize-test-helpers/src/mockSequelize.js b/node_modules/sequelize-test-helpers/src/mockSequelize.js
index 05d90cb..0a3bca6 100644
--- a/node_modules/sequelize-test-helpers/src/mockSequelize.js
+++ b/node_modules/sequelize-test-helpers/src/mockSequelize.js
@@ -1,12 +1,13 @@
-const { spy } = require('sinon')
+const { isJestRunner, sinon } = require('./utils/checkIsJestRunner')
+const { spy } = sinon
 
 const DataTypes = require('./dataTypes')
 
 class Model {}
-Model.init = spy()
-Model.belongsToMany = spy()
-Model.belongsTo = spy()
-Model.hasMany = spy()
-Model.hasOne = spy()
+Model.init = isJestRunner ? jest.fn() : spy()
+Model.belongsToMany = isJestRunner ? jest.fn() : spy()
+Model.belongsTo = isJestRunner ? jest.fn() : spy()
+Model.hasMany = isJestRunner ? jest.fn() : spy()
+Model.hasOne = isJestRunner ? jest.fn() : spy()
 
 module.exports = { Model, DataTypes }
diff --git a/node_modules/sequelize-test-helpers/src/sequelize.js b/node_modules/sequelize-test-helpers/src/sequelize.js
index b3983c9..a654f77 100644
--- a/node_modules/sequelize-test-helpers/src/sequelize.js
+++ b/node_modules/sequelize-test-helpers/src/sequelize.js
@@ -1,11 +1,12 @@
-const sinon = require('sinon')
 const hooks = require('./constants/hooks')
 const staticMethods = require('./constants/staticMethods')
 const { syncMethods, asyncMethods } = require('./constants/staticModelMethods')
+const { isJestRunner, sinon } = require('./utils/checkIsJestRunner')
 
 const sequelize = {
   define: (modelName, modelDefn, metaData = {}) => {
-    const model = function () {}
+    const model = function() {
+    }
     model.modelName = modelName
 
     const attachHook = name => hook => {
@@ -19,7 +20,7 @@ const sequelize = {
     }
 
     const addStatic = key => {
-      model[key] = sinon.stub()
+      model[key] = isJestRunner ? jest.fn() : sinon.stub()
     }
 
     hooks.forEach(hook => {
@@ -34,11 +35,11 @@ const sequelize = {
     syncMethods.forEach(addStatic)
     asyncMethods.forEach(addStatic)
 
-    model.isHierarchy = sinon.spy()
+    model.isHierarchy = isJestRunner ? jest.fn() : sinon.spy()
 
-    model.prototype.update = sinon.stub()
-    model.prototype.reload = sinon.stub()
-    model.prototype.set = sinon.spy()
+    model.prototype.update = isJestRunner ? jest.fn() : sinon.stub()
+    model.prototype.reload = isJestRunner ? jest.fn() : sinon.stub()
+    model.prototype.set = isJestRunner ? jest.fn() : sinon.spy()
     Object.keys(modelDefn).forEach(attachProp)
 
     model.prototype.indexes = metaData.indexes
@@ -49,7 +50,7 @@ const sequelize = {
 }
 
 staticMethods.forEach(method => {
-  sequelize[method] = sinon.stub()
+  sequelize[method] = isJestRunner ? jest.fn() : sinon.stub()
 })
 
 module.exports = sequelize
diff --git a/node_modules/sequelize-test-helpers/src/utils/checkIsJestRunner.js b/node_modules/sequelize-test-helpers/src/utils/checkIsJestRunner.js
new file mode 100644
index 0000000..eb32257
--- /dev/null
+++ b/node_modules/sequelize-test-helpers/src/utils/checkIsJestRunner.js
@@ -0,0 +1,7 @@
+const isJestRunner = process.env.SEQUELIZE_TEST_HELPERS_JEST_RUNNER === 'true' || process.env.SEQUELIZE_TEST_HELPERS_JEST_RUNNER === true
+
+module.exports = {
+  isJestRunner,
+  expect: isJestRunner ? expect : require('chai').expect,
+  sinon: isJestRunner ? () => {} : require('sinon')
+}
