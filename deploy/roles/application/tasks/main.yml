---
- name: Install version control software
  apt:
    name: git
    state: present

# - name: Install nodegit depedency libstdc++
#   apt:
#     name: libstdc++
#     state: present

# - name: Install nodegit depedency libkrb5-dev
#   apt:
#     name: libkrb5-dev
#     state: present

# - name: Install nodegit depedency krb5-config
#   apt:
#     name: krb5-config
#     state: present

# - name: Install nodegit depedency libssl-dev
#   apt:
#     name: libssl-dev
#     state: present

# - name: Install nodegit depedency libsasl2-dev
#   apt:
#     name: libsasl2-dev
#     state: present

# - name: Install nodegit depedency libsasl2-modules-gssapi-mit
#   apt:
#     name: libsasl2-modules-gssapi-mit
#     state: present

# - name: Install nodegit depedency gcc
#   apt:
#     name: gcc
#     state: present

# - name: Install nodegit depedency libc-dev
#   apt:
#     name: libc-dev
#     state: present

# - name: Install nodegit depedency make
#   apt:
#     name: make
#     state: present

# - name: Install nodegit depedency g++
#   apt:
#     name: g++
#     state: present

# - name: Install nodegit depedency build-essential
#   apt:
#     name: build-essential
#     state: present

# - name: Install nodegit depedency libpcre++-dev
#   apt:
#     name: libpcre++-dev
#     state: present

- name: Define source code location
  set_fact:
    source_dir: /home/{{application_user}}/aria-at-app

# Since some environments log in as the application_user and others do
# not, and since `become: yes` does not work with commands executed on
# the client instead of the server, uploading the source code takes two
# steps. One to upload to the logged-in user's home directory (without
# sudo) and one to move the source code to the application_user home
# directory (with sudo).
- name: Upload project source code
  command:
    cmd: rsync -rv --filter=':- .gitignore' --exclude='.git/' ./ aria-at-app-sandbox.bocoup.com:~/aria-at-app
    chdir: '{{playbook_dir}}/..'
  delegate_to: localhost
  when: deployment_mode != 'development'

- name: Determine the ssh user
  # Source https://stackoverflow.com/a/42095916/3888572
  local_action: shell ssh -G {{fqdn}} | awk '/^user /{ print $2 }'
  register: ssh_user_output
  when: deployment_mode != 'development'

- name: Set the ssh user
  set_fact:
    ssh_user: "{{ssh_user_output.stdout}}"
  when: deployment_mode != 'development'

- name: Move source code into application user directory
  become: yes
  command:
    cmd: rsync -a --filter=':- /home/{{ssh_user}}/aria-at-app/.gitignore' /home/{{ssh_user}}/aria-at-app/ /home/{{application_user}}/aria-at-app
    chdir: /home/{{ssh_user}}/aria-at-app
  when:
    - deployment_mode != 'development'
    - ssh_user != application_user

# TODO: this can be removed when the import tests feature is fully complete
# This is a workaround solution for shelling out to the import script
- name: Make server folder writable for import tests API endpoint
  file:
    path: '{{source_dir}}/server/scripts'
    mode: '0777'
    recurse: yes
  when: deployment_mode != 'development'
  notify: "restart server"

# TODO: this can be removed when the import tests feature is fully complete
# This is a workaround solution for shelling out to the import script
- name: Make vagrant folder writable
  file:
    path: /vagrant/server/scripts
    mode: '0777'
    recurse: yes
  when: deployment_mode == 'development'

- name: Link application code
  file:
    dest: '{{source_dir}}'
    src: /vagrant
    state: link
  when: deployment_mode == 'development'

- name: Install Node.js dependencies
  command: yarn install
  args:
    chdir: '{{source_dir}}'

- name: Insert environment configuration file
  copy:
    dest: /home/{{application_user}}/config.env
    src: files/config-{{deployment_mode}}.env
    owner: '{{application_user}}'
  register: environment_config

- name: Create database and database user
  command: sudo -u postgres ./db/scripts/db_init.sh {{environment_config.dest}}
  args:
    chdir: '{{source_dir}}'

- name: Migrate database
  shell: DOTENV_CONFIG_PATH={{environment_config.dest}} node -r ./node_modules/dotenv/config $(npm bin)/sequelize-cli db:migrate --config ./config/config.js --migrations-path ./server/migrations/
  args:
    chdir: '{{source_dir}}'

- name: Seed database
  shell: DOTENV_CONFIG_PATH={{environment_config.dest}} node -r ./node_modules/dotenv/config $(npm bin)/sequelize-cli db:seed:all --config ./config/config.js --seeders-path ./server/seeders/
  args:
    chdir: '{{source_dir}}'

- name: Build front end package
  command: ./deploy/scripts/export-and-exec.sh {{environment_config.dest}} yarn workspace client build
  args:
    chdir: '{{source_dir}}'

- include: service.yml

- include: cron.yml
